// ignore_for_file: avoid_print

import 'package:api/api.dart';
import 'package:dio/dio.dart';

void main() async {
  // –°–æ–∑–¥–∞–µ–º Dio –∫–ª–∏–µ–Ω—Ç —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  final dio = Dio(
    BaseOptions(
      baseUrl: 'http://localhost:8080/api/question/v1',
      connectTimeout: const Duration(seconds: 30),
      receiveTimeout: const Duration(seconds: 30),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    ),
  );

  // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
  final apiClient = RestApiClient(dio);

  try {
    // –ü—Ä–∏–º–µ—Ä 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    print('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...');
    const createInput = CreateQuestionInput(
      languageCode: 'ru',
      topicTags: [
        TopicTagPair(
          topic: 'Golang',
          tag: 'concurrency',
        ),
      ],
      grade: CreateQuestionInputGrade.middle,
      shortText: '–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–æ—Ä—É—Ç–∏–Ω–∞?',
      fullText: '–ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≥–æ—Ä—É—Ç–∏–Ω –≤ Go',
      answerText: '–ì–æ—Ä—É—Ç–∏–Ω–∞ - —ç—Ç–æ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Å—Ä–µ–¥–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Go',
    );

    final createResult = await apiClient.questions.createQuestion(body: createInput);
    print('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —Å ID: ${createResult.id}');

    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ ID
    if (createResult.id != null) {
      print('\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ ID...');
      final question = await apiClient.questions.getQuestion(
        id: createResult.id!,
        languageCode: 'ru',
      );
      print('‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: "${question.shortText}"');
      print('   –¢–µ–º–∞: ${question.topics?.join(", ")}');
      print('   –¢–µ–≥–∏: ${question.tags?.join(", ")}');
      print('   –£—Ä–æ–≤–µ–Ω—å: ${question.grade}');
      print('   –û—Ç–≤–µ—Ç: ${question.answerText}');
    }

    // –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    print('\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...');
    final questionsResponse = await apiClient.questions.getQuestions(
      languageCode: 'ru',
      topic: 'Golang',
      grade: Grade.middle,
      order: Order.desc,
    );

    print('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsResponse.questions?.length ?? 0}');
    if (questionsResponse.questions != null) {
      for (final q in questionsResponse.questions!) {
        print('   - ${q.shortText} (${q.id})');
      }
    }

    // –ü—Ä–∏–º–µ—Ä 4: –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    if (createResult.id != null) {
      print('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞...');
      await apiClient.questions.deleteQuestion(id: createResult.id!);
      print('‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω');
    }
  } on DioException catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ API: ${e.response?.statusCode} - ${e.message}');
    if (e.response?.data != null) {
      print('   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${e.response?.data}');
    }
  } catch (e) {
    print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
  }
}
