# ═══════════════════════════════════════════════════════════════════════
# Конфигурация генератора API кода из OpenAPI спецификации (swagger_parser)
# ═══════════════════════════════════════════════════════════════════════

swagger_parser:
  # ───────────────────────────────────────────────────────────────────────
  # ОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ
  # ───────────────────────────────────────────────────────────────────────

  # Путь к файлу OpenAPI спецификации (YAML или JSON)
  # Можно указать относительный путь от корня пакета
  schema_path: schemas/question.yaml

  # Альтернатива: URL к удаленной спецификации
  # schema_url: https://petstore.swagger.io/v2/swagger.json

  # Директория для сгенерированных файлов
  # Все файлы будут созданы внутри этой директории
  output_directory: lib/src/generated

  # ───────────────────────────────────────────────────────────────────────
  # ИМЕНОВАНИЕ И СТРУКТУРА
  # ───────────────────────────────────────────────────────────────────────

  # Имя API для папки и экспортного файла
  # Если не указано, используется имя из файла спецификации
  name: question_api

  # Постфикс для классов клиентов (например: QuestionsClient)
  # По умолчанию: Client
  client_postfix: Client

  # Имя корневого клиента (если root_client: true)
  # По умолчанию: RestClient
  root_client_name: RestApiClient

  # ───────────────────────────────────────────────────────────────────────
  # СЕРИАЛИЗАЦИЯ И МОДЕЛИ
  # ───────────────────────────────────────────────────────────────────────

  # Библиотека для JSON сериализации
  # Варианты: json_serializable, freezed, dart_mappable
  # - json_serializable: простые data классы с toJson/fromJson
  # - freezed: иммутабельные классы с copyWith, ==, toString
  # - dart_mappable: современная альтернатива с лучшей производительностью
  json_serializer: freezed

  # Использовать синтаксис Freezed 3.x (если json_serializer: freezed)
  # true - новый синтаксис (@Freezed() вместо @freezed)
  # false - старый синтаксис для совместимости с Freezed 2.x
  use_freezed3: true

  # Значение для fallback union при неизвестных дискриминаторах
  # Пустая строка - не создавать fallback
  # Строка (например "unknown") - создать вариант для неизвестных значений
  fallback_union: ""

  # ───────────────────────────────────────────────────────────────────────
  # КЛИЕНТЫ И МЕТОДЫ
  # ───────────────────────────────────────────────────────────────────────

  # Генерировать корневой клиент с интерфейсом всех клиентов
  # true - создаст QuestionApiClient с геттерами для всех клиентов
  # false - будут только отдельные клиенты (QuestionsClient и т.д.)
  root_client: true

  # Генерировать файл экспорта (export.dart)
  # true - создаст файл с экспортами всех моделей и клиентов
  # false - нужно будет импортировать файлы вручную
  export_file: true

  # Поместить весь API в отдельную папку
  # true - создаст папку question_api/ внутри output_directory
  # false - файлы будут напрямую в output_directory
  put_in_folder: false

  # Поместить все клиенты в отдельную папку clients/
  # true - создаст папку clients/ для всех *Client файлов
  # false - клиенты будут в папках по тегам
  put_clients_in_folder: false

  # Объединить все клиенты в один файл
  # true - все endpoints будут в одном клиенте
  # false - клиенты разделены по тегам из OpenAPI
  merge_clients: false

  # ───────────────────────────────────────────────────────────────────────
  # МЕТОДЫ API
  # ───────────────────────────────────────────────────────────────────────

  # Использовать путь endpoint'а для имени метода
  # true - имя метода из пути (например: getQuestion из /question)
  # false - использовать operationId из OpenAPI спецификации
  path_method_name: false

  # Content-Type по умолчанию для всех запросов
  # Можно переопределить аннотацией @Headers в конкретных методах
  default_content_type: "application/json"

  # Оборачивать возвращаемые типы в HttpResponse (Retrofit)
  # true - методы вернут HttpResponse<T> с доступом к headers, status code
  # false - методы вернут просто T
  original_http_response: false

  # Добавлять параметр @Extras() ко всем запросам (для interceptors)
  # true - все методы получат параметр Map<String, dynamic>? extras
  # false - extras нужно добавлять вручную где требуется
  extras_parameter_by_default: false

  # Добавлять параметр @DioOptions() ко всем запросам
  # true - все методы получат параметр Options? options для настройки Dio
  # false - options нужно добавлять вручную где требуется
  dio_options_parameter_by_default: false

  # ───────────────────────────────────────────────────────────────────────
  # ENUM И ТИПЫ
  # ───────────────────────────────────────────────────────────────────────

  # Включать метод toJson() в enum классы
  # true - enum.toJson() вернет строковое значение
  # false - сериализация через .name
  enums_to_json: false

  # Добавлять префикс родительского компонента к именам enum
  # true - если enum внутри Grade, будет GradeValue
  # false - просто Value
  enums_parent_prefix: true

  # Добавлять неизвестное значение в enum для обратной совместимости
  # true - добавит свойство @JsonKey(unknownEnumValue: ...)
  # false - ошибка при неизвестном значении с backend
  unknown_enum_value: true

  # Использовать MultipartFile вместо File для файловых параметров
  # true - тип MultipartFile (для ручного контроля загрузки)
  # false - тип File (автоматическая конвертация в MultipartFile)
  use_multipart_file: false

  # ───────────────────────────────────────────────────────────────────────
  # ФИЛЬТРАЦИЯ ENDPOINTS
  # ───────────────────────────────────────────────────────────────────────

  # Теги для исключения из генерации
  # Endpoints с этими тегами не будут сгенерированы
  # exclude_tags:
  #   - "deprecated"
  #   - "admin"

  # Теги для включения в генерацию (приоритет над exclude_tags)
  # Если указано, будут сгенерированы ТОЛЬКО endpoints с этими тегами
  # include_tags:
  #   - "questions"
  #   - "users"

  # Имя клиента для endpoints без тегов
  # По умолчанию: "fallback" (создаст FallbackClient)
  fallback_client: "fallback"

  # Пропускать параметры с указанными именами
  # Полезно для служебных параметров, которые добавляет interceptor
  # skipped_parameters:
  #   - "X-Auth-Token"
  #   - "X-Request-ID"

  # ───────────────────────────────────────────────────────────────────────
  # ЗАМЕНА ИМЕН
  # ───────────────────────────────────────────────────────────────────────

  # Правила замены в именах классов/enum (regex)
  # Применяются в порядке определения
  # replacement_rules:
  #   # Убрать цифры из имен
  #   - pattern: "[0-9]+"
  #     replacement: ""
  #   # Заменить Api на Client
  #   - pattern: "Api$"
  #     replacement: "Client"

  # ───────────────────────────────────────────────────────────────────────
  # ДОПОЛНИТЕЛЬНО
  # ───────────────────────────────────────────────────────────────────────

  # Помечать сгенерированные файлы комментарием
  # true - добавит "// GENERATED CODE - DO NOT MODIFY BY HAND"
  # false - файлы без пометок
  mark_files_as_generated: true

  # Объединить все файлы в один (для работы с build_runner)
  # true - один большой файл со всем кодом
  # false - отдельные файлы для каждой модели/клиента
  # merge_outputs: false

  # ───────────────────────────────────────────────────────────────────────
  # МНОЖЕСТВЕННЫЕ СХЕМЫ
  # ───────────────────────────────────────────────────────────────────────

  # Для работы с несколькими API одновременно можно использовать:
  # schemes:
  #   - schema_path: schemas/api_v1.yaml
  #     name: api_v1
  #     json_serializer: freezed
  #
  #   - schema_url: https://api.example.com/openapi.json
  #     name: external_api
  #     json_serializer: json_serializable
  #     put_in_folder: true

